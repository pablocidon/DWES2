<?php/** * Class Usuario * * Clase usuario para la realización de operaciones con el objeto. * * PHP version 7.0 * * @category Usuario * @package  OperacionesUsuario * @source Usuario.php * @since Versión 1.0 * @author Pablo Cidón Barrio. * @copyright 13-02-2018 */require_once "UsuarioPDO.php";class Usuario{    /**     * Código del usuario     *     * Devulve el código del usuario que ha iniciado la sesión     *     * @var string $codUsuario Código del usuario.     */    private $codUsuario;    /**     * Descripción del usuario     *     * Descripción del usuario que ha iniciado la sesión.     *     * @var string $descUsuario Datos relativos al usuario.     */    private $descUsuario;    /**     * Password del usuario     *     * Contraseña del usuario que ha iniciado la sesión     *     * @var string $password Contraseña del usuario.     */    private $password;    /**     * Perfil del usuario     *     * Tipo de perfil que tiene el usuario, puede ser 'Usuario' o 'Administrador'     *     * @var string $perfil Tipo de perfil del usuario.     */    private $perfil;    /**     * Última conexión del usuario.     *     * Fecha de la última vez que el usuario ha iniciado la sesión     *     * @var datetime $ultimaConexion Fecha de la última vez que el usuario accedió al programa.     */    private $ultimaConexion;    /**     * Contador de accesos del usuario     *     * Cantidad de veces que el usuario ha iniciado sesión     *     * @var integer $contadorAccesos Contador de las veces que el usuario a iniciado sesión en el programa.     */    private $contadorAccesos;    /**     * @function validarUsuario     *     * Validar usuarios     *     * @param string $codUsuario Código del usuario que se ha introducido.     * @param string $password Contraseña que se ha introducido.     * @return null|Usuario Devuelve si el usuario se ha encontrado o no.     */    public static function validarUsuario($codUsuario,$password){        $usuario=null;        $arrayUsuario=UsuarioPDO::validarUsuario($codUsuario,$password);        if(!empty($arrayUsuario)) {            $usuario = new Usuario($codUsuario, $arrayUsuario['descUsuario'], $password, $arrayUsuario['perfil'], $arrayUsuario['ultimaConexion'], $arrayUsuario['contadorAccesos']);        }        return $usuario;    }    /**     * @function contadorAccesos     *     * Contar los accesos del usuario.     *     * @param string $codUsuario Codigo del usuario en el que se llevará a cabo el contador     * @return integer $visitas Cantidad de visitas realizadas     */    public function contadorAccesos($codUsuario){        return UsuarioPDO::contadorAccesos($codUsuario);    }    /**     * @function ultimaConexion     *     * Fecha que el usuario a entrado por última vez     *     * @param string $codUsuario Código del usuario del que se guardará la fecha.     * @param datetime $fecha Nueva fecha de última conexión     */    public function ultimaConexion($codUsuario,$fecha){        return UsuarioPDO::ultimaConexion($codUsuario,$fecha);    }    /**     * @function __construct     *     * Función constructora.     *     * @param string $codUsuario Código del usuario     * @param string $descUsuario Nombre y Apellidos del mismo     * @param string $password Contraseña del usuario.     * @param string $perfil Tipo de perfil que tendrá el usuario.     * @param datetime $ultimaConexion Fecha de la última conexión del usuario.     * @param integer $contadorAccesos Cantidad de veces que ha entrado en el sistema.     */    public function __construct($codUsuario, $descUsuario, $password, $perfil, $ultimaConexion, $contadorAccesos){        $this->codUsuario=$codUsuario;        $this->descUsuario=$descUsuario;        $this->password=$password;        $this->perfil=$perfil;        $this->ultimaConexion=$ultimaConexion;        $this->contadorAccesos=$contadorAccesos;    }    /**     * @return string     */    public function getCodUsuario(){        return $this->codUsuario;    }    /**     * @return string     */    public function getDescUsuario(){        return $this->descUsuario;    }    /**     * @return string     */    public function getPassword(){        return $this->password;    }    public function getPerfil(){        return $this->perfil;    }    /**     * @return datetime     */    public function getUltimaConexion(){        return $this->ultimaConexion;    }    /**     * @return int     */    public function getContadorAccesos(){        return $this->contadorAccesos;    }    /**     * @param string $codUsuario Código de usuario nuevo.     */    public function setCodUsuario($codUsuario){        $this->codUsuario = $codUsuario;    }    /**     * @param string $descUsuario Nueva descripción del usuario.     */    public function setDescUsuario($descUsuario){        $this->descUsuario = $descUsuario;    }    /**     * @param string $password Nueva contraseña     */    public function setPassword($password){        $this->password = $password;    }    /**     * @param string $perfil Nuevo tipon de perfil     */    public function setPerfil($perfil){        $this->perfil = $perfil;    }    /**     * @param datetime $ultimaConexion Nueva fecha de última conexión     */    public function setUltimaConexion($ultimaConexion){        $this->ultimaConexion = $ultimaConexion;    }    /**     * @param integer $contadorAccesos Nueva cantidad de accesos     */    public function setContadorAccesos($contadorAccesos){        $this->contadorAccesos = $contadorAccesos;    }    /**     * @function crearPerfil()     *     * Función para crear nuevos usuarios.     *     * @param string $codUsuario     * @param string $descUsuario     * @param string $password     * @return  null|Usuario Usuario en caso de que no exista o null si el usuario ya existe.     */    public static function crearPerfil($codUsuario,$descUsuario,$password){        $usuario = null;        if(UsuarioPDO::crearPerfil($codUsuario,$descUsuario,$password)){            $usuario = new Usuario($codUsuario,$descUsuario,$password);        }        return $usuario;    }    /**     * @function existeUsuario()     *     * Función para comprobar si existe un usuario.     *     * @param $codUsuario Código del usuario a comprobar en la base de datos.     * @return mixed Si el código del usuario existe o no.     */    public static function existeUsuario($codUsuario){        return UsuarioPDO::existeUsuario($codUsuario);    }    /**     * @function editarPerfil()     *     * Función para editar el perfil.     *     * @param $descUsuario nueva descripción del usuario.     * @param $password nueva contraseña del usuario.     * @param $codUsuario código del usuario al que va a cambiar el perfil.     * @return mixed Si se han aplicado los cambios o no.     */    public static function editarPerfil($descUsuario,$password,$codUsuario){        return UsuarioPDO::editarPerfil($descUsuario,$password,$codUsuario);    }    /**     * @function eliminarPerfil()     *     * Función para eliminar el perfil del usuario.     *     * @param $codUsuario Código del usuario que se va a eliminar.     * @return mixed Si se ha eliminado o no.     */    public static function eliminarPerfil($codUsuario){        return UsuarioPDO::eliminarPerfil($codUsuario);    }}?>